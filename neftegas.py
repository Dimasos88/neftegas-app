import numpy as np

#Исходные данные
R = 8.314

Tпл = 314

Pпл = 127 * 98066.5

xj = [0.88, 0.06, 0.01, 0.01, 0.008, 0.018, 0.01, 0.001, 0.003]

# print(sum(xj))

xk = [0.88, 0.06, 0.01, 0.01, 0.008, 0.018, 0.01, 0.001, 0.003]

Tcj = [190.45, 305.32, 369.83, 425.12, 469.7, 512.8, 126.2, 304.19, 373.53]

Tck = [190.45, 305.32, 369.83, 425.12, 469.7, 512.8, 126.2, 304.19, 373.53]

Vcj = [0.0000986, 0.0001455, 0.0002, 0.000255, 0.000313, 0.000335]

Vck = [0.0000986, 0.0001455, 0.0002, 0.000255, 0.000313, 0.000335]

Pcj = [45.99*100000, 48.72*100000, 42.48*100000, 37.96*100000, 33.7*100000, 33.3*100000, 34.6*100000, 73.82*100000, 89.63*100000]

w = [0.012, 0.1, 0.152, 0.2, 0.252, 0.25, 0.0377, 0.228, 0.0942]

delta_test = []

delta = []

# Разделить массив на подмамассивы(сделать матрицу)
def split_array(array, num):
       new_array = [array[i:i+num] for i in range(0, len(array), num)]
       return new_array
#------------------------------------------------------------------------------------

# Расчёт aj
aj = []
for j in range(9):
    aj.append(0.45724 * (R**2) * (Tcj[j]**2) / Pcj[j])

#------------------------------------------------------------------------------------

# Расчёт bj
bj = []
for j in range(9):
    bj.append(0.0778 * (R) * (Tcj[j]) / Pcj[j])

#------------------------------------------------------------------------------------

# Расчёт kj
kj = []
for j in range(9):
       kj.append(0.37464 + 1.54226*w[j] - 0.26992*(w[j]**2))

#------------------------------------------------------------------------------------

# Расчёт alpha_j
alpha_j = []
for j in range(9):
       alpha_j.append( aj[j]*((1 + kj[j]*(1 - ((Tпл/ Tcj[j])**0.5) ))**2) )

alpha_k = alpha_j

print("alpha_j = ", alpha_j)

#------------------------------------------------------------------------------------

# Расчёт delta
for j in range(6):
       for k in range(6):
              delta_test.append(1 - (((2*((Vcj[j]**(1/6))*(Vck[k]**(1/6)))) / ((Vcj[j]**(1/3)) + (Vck[k]**(1/3)) ))**(1.2)) ) 

delta_test = np.array(split_array(delta_test, 6))

delta.append(np.block([delta_test[0], np.array([0.025, 0.105, 0.07])]))
delta.append(np.block([delta_test[1], np.array([0.01, 0.13, 0.085])]))
delta.append(np.block([delta_test[2], np.array([0.09, 0.125, 0.08])]))
delta.append(np.block([delta_test[3], np.array([0.095, 0.115, 0.075])]))
delta.append(np.block([delta_test[4], np.array([0.1, 0.115, 0.07])]))
delta.append(np.block([delta_test[5], np.array([0.11, 0.115, 0.07])]))
delta.append(np.array([ 0.025, 0.01, 0.09, 0.095, 0.1, 0.11,   0,    0,    0.13  ]))
delta.append(np.array([ 0.105, 0.13, 0.125, 0.115, 0.115, 0.115, 0,  0,    0.135  ]))
delta.append(np.array([ 0.07, 0.085, 0.08, 0.075, 0.07, 0.07,   0.13, 0.135, 0  ]))
#------------------------------------------------------------------------------------

# Расчёт alpha_jk
alpha_jk = []

for j in range(9):
       for k in range(9):
              alpha_jk.append(((alpha_j[j]*alpha_k[k])**0.5)*(1 - delta[j][k]))

alpha_jk = split_array(alpha_jk, 9)

#------------------------------------------------------------------------------------

# Расчёт alpha_m и betta_m 
xjxk = (np.outer(xj, xk))

alpha_m = np.sum(np.dot(xjxk, alpha_jk))

print('alpha_m = ',alpha_m)

betta_m = np.sum(np.dot(xj, bj))

print('betta_m = ', betta_m)
#------------------------------------------------------------------------------------

# Расчёт A и B
A = (alpha_m * Pпл) / ((R**2) * (Tпл**2))

B = (betta_m * Pпл) / ((R) * (Tпл))

print(A)

print(B)
#------------------------------------------------------------------------------------
# Расчёт z
coeff = [1, -(1-B), (A-2*B-3*(B**2)), -(A*B-((B**2) - (B**3)))]

z = max(np.roots(coeff))

print("z = ", z)
